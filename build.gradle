plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'org.sonatype.gradle.plugins.scan' version '2.5.5'
    id 'org.graalvm.buildtools.native' version '0.9.19'
}

group 'io.github.kamilszewc'
version '1.14'

graalvmNative {
    binaries {
        main {
            imageName = 'two-factor-client'
            useFatJar = true
        }
    }
}

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'io.github.kamilszewc.twofactorclient'
    mainClass = 'io.github.kamilszewc.twofactorclient.Application'
}

javafx {
    version = '19'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    // Totp generator
    implementation 'io.github.kamilszewc:totp:5.0'

    // Google zxing
    implementation 'com.google.zxing:core:3.5.1'
    implementation 'com.google.zxing:javase:3.5.1'
}

test {
    useJUnitPlatform()
}


import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files
import java.nio.file.StandardCopyOption

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
        if (!Os.isFamily(Os.FAMILY_WINDOWS) && !Os.isFamily(Os.FAMILY_MAC)) {
            jvmArgs += [
                    '--jdk.gtk.version=2'
            ]
        }
    }

    jpackage {
        outputDir = "packages"
        skipInstaller = false
        installerName = "two-factor-client"
        vendor = "Kamil Szewc"
        if (Os.isFamily(Os.FAMILY_MAC)) {
            imageName = "Two Factor Client"
            installerType = 'pkg'
            icon = 'src/main/resources/icon.icns'
        } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            imageName = "Two Factor Client"
            installerType = 'msi'
            icon = 'src/main/resources/logo.ico'
            installerOptions += [
                    '--win-menu'
            ]
        } else {
            imageName = "two-factor-client"
            installerType = 'deb'
            icon = 'src/main/resources/logo.png'
        }
    }
}

jlinkZip {
    group = 'distribution'
}

def copyLicense = tasks.register('copyLicense') {
    doLast {
        Files.list(java.nio.file.Path.of("${projectDir}")).forEach {
            println it
        }
        Files.copy(java.nio.file.Path.of("${projectDir}", 'LICENSE'), java.nio.file.Path.of("${projectDir}", 'src/main/resources/LICENSE'), StandardCopyOption.REPLACE_EXISTING)
    }
}

compileJava.configure {
    dependsOn copyLicense
}

def createProperties = tasks.register('createProperties') {
    doLast {
        new File('src/main/resources/version.txt').withWriter {
            it.write(version)
        }
    }
}

compileJava.configure {
    dependsOn createProperties
}

ossIndexAudit {
    allConfigurations = false
    useCache = false
    outputFormat = 'DEFAULT'
}
